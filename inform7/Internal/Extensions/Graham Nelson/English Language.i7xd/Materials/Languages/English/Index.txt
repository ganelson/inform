%Index.Pages.Contents.Title = Contents Index
%Index.Pages.Contents.Caption = How the source text is organised

%Index.Elements.C.Title = Contents
%Index.Elements.C.Heading = Like the contents page of a book.|About headings<HEADINGS>; About extensions<EXTENSIONS>

%Index.Elements.C.Titling = *1 by *2
%Index.Elements.C.AnonymousTitling = *1 (anonymous)
%Index.Elements.C.NoContents = 
	This would look more like a contents page if the source text
	were divided up into headings.<HEADINGS>
%Index.Elements.C.Words = *1 words
%Index.Elements.C.ContentsHeading = CONTENTS
%Index.Elements.C.ExtensionsHeading = EXTENSIONS

%Index.Elements.C.IncludedAutomatically = Included automatically by Inform
%Index.Elements.C.IncludedFromSource = Included from the source text
%Index.Elements.C.IncludedBy = Included by the extension *1
%Index.Elements.C.Version = version *1

%Index.Elements.Cd.Title = Card
%Index.Elements.Cd.Heading = How this project might be filed in a library catalogue.|About the Library Card<LCARDS>; About IFIDs<IFIDS>

%Index.Elements.Tb.Title = Tables
%Index.Elements.Tb.Heading = Tables of information in the source text.|About tables<TABLES>

%Index.Elements.Tb.ShowExtensionTables = Show tables inside extensions too
%Index.Elements.Tb.ShowOnlyExtensionTables = Show tables inside extensions (there are none in the main text)
%Index.Elements.Tb.Definition = *1 definition
%Index.Elements.Tb.Definitions = *1 definitions
%Index.Elements.Tb.Column = *1 column
%Index.Elements.Tb.Columns = *1 columns
%Index.Elements.Tb.Row = *1 row
%Index.Elements.Tb.Rows = *1 rows
%Index.Elements.Tb.Blank = *1 blank
%Index.Elements.Tb.BlankEach = one for each *1
%Index.Elements.Tb.Col = col *1
%Index.Elements.Tb.Sets = sets
%Index.Elements.Tb.Names = names
%Index.Elements.Tb.Property = *1 property
%Index.Elements.Tb.Of = of *1
%Index.Elements.Tb.Entry = *1 entry

%Index.Elements.Fi.Title = Figures
%Index.Elements.Fi.Heading = The figures, sound effects or external files used.|About figures<FIGURES>; About sounds<SOUNDS>; About files<EFILES>

%Index.Elements.Fi.NoFigures = There are no figures, or illustrations, in this project.
%Index.Elements.Fi.NoSounds = There are no sound effects in this project.
%Index.Elements.Fi.NoFiles = This project doesn't read or write external files.
%Index.Elements.Fi.NoInternalFiles = This project doesn't read internal files.
%Index.Elements.Fi.ListOfFigures = List of Figures
%Index.Elements.Fi.ListOfSounds = List of Sounds
%Index.Elements.Fi.ListOfInternalFiles = List of Internal Files
%Index.Elements.Fi.ListOfFiles = List of External Files

%Index.Elements.Fi.Format = Format *1
%Index.Elements.Fi.UnknownFormat = Unknown image format
%Index.Elements.Fi.Dimensions = *1 (width) by *2 (height) pixels
%Index.Elements.Fi.Missing = Missing from the Figures folder
%Index.Elements.Fi.Resource = Filename: "*1" - resource number *2

%Index.Elements.Fi.UnknownSoundFormat = Unknown sound format
%Index.Elements.Fi.SoundUnsupported = Warning: not officially supported in Glulx yet
%Index.Elements.Fi.SoundFormatOneTrack = Type *1 *2 file with 1 track
%Index.Elements.Fi.SoundFormatMultiTrack = Type *1 *2 file with *3 tracks
%Index.Elements.Fi.SoundFile = *1 *2 file
%Index.Elements.Fi.MissingSound = Missing from the Sounds folder
%Index.Elements.Fi.DurationS = duration *1 seconds
%Index.Elements.Fi.DurationMS = duration *1 minutes *2 seconds
%Index.Elements.Fi.DurationM = duration *1 minutes exactly
%Index.Elements.Fi.Sampled = Sampled as *1
%Index.Elements.Fi.Mono = Mono
%Index.Elements.Fi.Stereo = Stereo
%Index.Elements.Fi.BitRate = *1 kilobits/sec

%Index.Elements.Fi.MissingInternalFile = Missing from the Data folder

%Index.Elements.Fi.BinaryFile = Binary file "*1"
%Index.Elements.Fi.TextFile = File "*1"
%Index.Elements.Fi.FileOwnedByThis = owned by this project
%Index.Elements.Fi.FileOwnedByOther = owned by another project
%Index.Elements.Fi.FileOwnedBy = owned by project with IFID number *1

%Index.Elements.Fi.ThumbnailLimit = 
	Only the first *1 thumbnails have been shown here, to avoid Inform taking
	up too much memory. If you'd like to see more, set 'Use index figure
	thumbnails of at least *2.', or whatever number you want to wait for.

%Index.Elements.In.Title = Innards
%Index.Elements.In.Heading = Technicalities about the story file being produced.|About the story file<STORYFILES>; About use options<OPTIONS>

%Index.Elements.In.Technicalities = See some technicalities for Inform maintainers only
%Index.Elements.In.Format = Story file format
%Index.Elements.In.ActiveUseOptions = The following use options are in force
%Index.Elements.In.InactiveUseOptions = Whereas these are not in force
%Index.Elements.In.NoUseOptions = None
%Index.Elements.In.LanguageDefinition = Inform language definition
%Index.Elements.In.Included = Included: *1
%Index.Elements.In.Excluded = Excluded: *1
%Index.Elements.In.Log = Debugging log

%Index.Elements.In.SetFromSource = Set from the source text
%Index.Elements.In.SetAutomatically = Set from the Options.txt configuration file, or automatically
%Index.Elements.In.SetFrom = Set from *1
%Index.Elements.In.Double = Double this

%Index.Pages.Actions.Title = Actions Index
%Index.Pages.Actions.Caption = Things that people can try to do

%Index.Pages.ActionDetails.Heading = A single action in detail.|About the action rulebooks<ARSUMMARY>

%Index.Elements.A1.Title = Grouped
%Index.Elements.A1.Heading = With similar actions grouped together|About actions<ACTIONS>; New actions<NEWACTIONS>; Out of world actions (in red)<OUTOFWORLD>

%Index.Elements.A1.RequiresLight = requires light
%Index.Elements.A1.PastTense = past tense
%Index.Elements.A1.CommandsHeading = Typed commands leading to this action
%Index.Elements.A1.NoCommands = None
%Index.Elements.A1.ValuesHeading = Named values belonging to this action
%Index.Elements.A1.RulesHeading = Rules controlling this action
%Index.Elements.A1.ResponseIcons =
	Click on the speech-bubble icons to see the responses, or here to see all of them

%Index.Elements.A2.Title = Alphabetic
%Index.Elements.A2.Heading = Listed in alphabetical order|About actions<ACTIONS>; New actions<NEWACTIONS>; Out of world actions (in red)<OUTOFWORLD>

%Index.Elements.A2.ActionColumn = action
%Index.Elements.A2.NounColumn = noun
%Index.Elements.A2.SecondColumn = second noun

%Index.Elements.A2.Light = requires light
%Index.Elements.A2.Touchable = touchable
%Index.Elements.A2.Carried = carried

%Index.Elements.Bh.Title = Behaviour
%Index.Elements.Bh.Heading = Kinds of action, grouped under common names|About kinds of action<KACTIONS>

%Index.Elements.Bh.None = No names for kinds of action have yet been defined.
%Index.Elements.Bh.Defined = defined as any of the following acts:

%Index.Elements.Cm.Title = Commands
%Index.Elements.Cm.Heading = Commands which the player can type|About commands<UNDERSTANDING>

%Index.Elements.Cm.Command = a command for controlling play
%Index.Elements.Cm.TestingCommand = a testing command not available in the final game
%Index.Elements.Cm.DirectionCommand = going

%Index.Elements.Cm.Alias = same as
%Index.Elements.Cm.Reversed = reversed

%Index.Elements.To.Title = Tokens
%Index.Elements.To.Heading = Those square-bracketed pieces inside Understand grammar|About tokens<TOKENS>; New tokens<NEWTOKENS>

%Index.Elements.To.Explanation1 = 
	In addition to the tokens listed below, any description of an object
	or value can be used: for example, "[number]" matches text like 127 or
	SIX, and "[open door]" matches the name of any nearby door which is
	currently open.
%Index.Elements.To.Explanation2 = 
	Names of objects are normally understood only when they are in scope
	(which roughly means: within sight), but writing "any" lifts this restriction.
	So "[any person]" allows every name of a person, wherever they happen to be,
	even if they are out of play and not found in any room.
%Index.Elements.To.SameAs = same as "*1"
%Index.Elements.To.Reversed = reversed
%Index.Elements.To.Something =
	an object which is in scope, which is almost always a thing but does not have to be

%Index.Pages.Kinds.Title = Kinds Index
%Index.Pages.Kinds.Caption = All the different sorts of value

%Index.Elements.Ch.Title = Chart
%Index.Elements.Ch.Heading = A chart of all the kinds|About kinds<KINDS>; New kinds of object<NEWKINDS>; Other new kinds<KINDSVALUE>

%Index.Elements.Ch.BasicKinds = basic kinds
%Index.Elements.Ch.NewKinds = making new kinds from old
%Index.Elements.Ch.Plural = plural

%Index.Elements.Ch.DefaultColumn = default value
%Index.Elements.Ch.RepeatColumn = repeat
%Index.Elements.Ch.PropsColumn = props
%Index.Elements.Ch.UnderColumn = under

%Index.Elements.Ch.DefaultGloss = 
	The <b>default value</b> is used when we make something like 
	a variable but don't tell Inform what its value is. For instance, if 
	we write 'Zero hour is a time that varies', but don't tell Inform 
	anything specific like 'Zero hour is 11:21 PM.', then Inform uses 
	the value in the table above to decide what it will be. 
	The same applies if we create a property (for instance, 'A person 
	has a number called lucky number.'). Kinds of value not included 
	in the table cannot be used in variables and properties.
%Index.Elements.Ch.RepeatGloss = 
	A tick for <b>repeat</b> means that it's possible to 
	repeat through values of this kind. For instance, 'repeat with T 
	running through times:' is allowed, but 'repeat with N running 
	through numbers:' is not - there are too many numbers for this to 
	make sense. A tick here also means it's possible to form lists such 
	as 'list of rulebooks', or to count the 'number of scenes'.
%Index.Elements.Ch.PropsGloss = 
	A tick for <b>props</b> means that values of this 
	kind can have properties. For instance, 'A scene can be thrilling or 
	dull.' makes an either/or property of a scene, but 'A number can be 
	nice or nasty.' is not allowed because it would cost too much storage 
	space. (Of course 'Definition:' can always be used to make adjectives 
	applying to numbers; it's only properties which have storage 
	worries.)
%Index.Elements.Ch.UnderGloss = 
	A tick for <b>under</b> means that it's possible 
	to understand values of this kind. For instance, 'Understand "award 
	[number]" as awarding.' might be allowed, if awarding were an action 
	applying to a number, but 'Understand "run [rule]" as rule-running.' 
	is not allowed - there are so many rules with such long names that 
	Inform doesn't add them to its vocabulary during play.
%Index.Elements.Ch.CovarianceGloss =
	<b>Covariance</b> means that if K is a kind of L, then something
	you make from K can be used as the same thing made from L. For example,
	a list of doors can be used as a list of things, because 'list of K' is
	covariant. <b>Contravariance</b> means it works the other way round.
	For example, an activity on things can be used as an activity on doors,
	but not vice versa, because 'activity of K' is contravariant.

%Index.Elements.Ar.Title = Arithmetic
%Index.Elements.Ar.Heading = Which values can be added up, multiplied and so on|About arithmetic<ARITHMETIC>

%Index.Elements.Ar.Calculator =
	Kinds of value marked with the calculator symbol are numerical -
	these are values we can add, multiply and so on. The range of these
	numbers depends on the Format setting for the project (Glulx format
	supports much higher numbers than Z-code).
%Index.Elements.Ar.Dimensionless = dimensionless

%Index.Elements.Ar.KindColumn = kind of value
%Index.Elements.Ar.MinimumColumn = minimum
%Index.Elements.Ar.MaximumColumn = maximum
%Index.Elements.Ar.DimensionsdColumn = dimensions

%Index.Elements.Vl.Title = Values
%Index.Elements.Vl.Heading = Values which vary during play, and equations.|About variables<VARIABLES>

%Index.Elements.Vl.UnderstoodVariables = <i>kind</i> understood - <i>value</i>
%Index.Elements.Vl.EquationsHeading = List of Named or Numbered Equations
%Index.Elements.Vl.AboutEquations = About equations<EQUATIONS>
%Index.Elements.Vl.NoEquations = None

%Index.Pages.Phrasebook.Title = Phrasebook Index
%Index.Pages.Phrasebook.Caption = A short dictionary

%Index.Elements.Ph.Title = Phrases
%Index.Elements.Ph.Heading = A guide to the phrases allowed|About phrases<PHRASES>

%Index.Elements.Lx.Title = Lexicon
%Index.Elements.Lx.Heading = Words used in descriptions|About descriptions<DESCRIPTIONS>

%Index.Elements.Lx.ToBe = *1, to be
%Index.Elements.Lx.KindOf = a kind of *1
%Index.Elements.Lx.ValueOf = value of *1

%Index.Elements.Lx.Explanation = 
	For instance, the description 'an unlocked door' is made
	up from the adjective 'unlocked' and the noun 'door', both of which
	can be found below. Property adjectives, like 'open', can be used
	when creating things - 'In the Ballroom is an open container' is
	allowed because 'open' is a property - but those with complicated
	definitions, like 'empty', can only be tested during play, e.g.
	with rules like 'Instead of taking an empty container, ...'.

%Index.Elements.Rl.Title = Relations
%Index.Elements.Rl.Heading = Relations give meaning to verbs|About relations<RELATIONS>

%Index.Elements.Rl.NameColumn = name
%Index.Elements.Rl.CategoryColumn = category
%Index.Elements.Rl.FromColumn = relates this...
%Index.Elements.Rl.ToColumn = ...to this

%Index.Elements.Vb.Title = Verbs
%Index.Elements.Vb.Heading = A table of verbs|About verbs<VERBS>

%Index.Elements.Vb.About =
	Verbs listed as "for saying only" are values of the kind "verb" and can be
	used in adaptive text, but they have no meaning to Inform, so they can't
	be used in sentences about what's in the story.
%Index.Elements.Vb.ForSayingOnly = for saying only
%Index.Elements.Vb.To = To <b>*1</b>
%Index.Elements.Vb.ToBe = To be <b>*1</b>
%Index.Elements.Vb.ToBeAbleTo = To be able to <b>*1</b>

%Index.Elements.Vb.Present = present
%Index.Elements.Vb.Past = past
%Index.Elements.Vb.Perfect = present perfect
%Index.Elements.Vb.PastPerfect = past perfect

%Index.Pages.Rules.Title = Rules Index
%Index.Pages.Rules.Caption = And the rulebooks they belong to

%Index.Elements.St.Title = Standards
%Index.Elements.St.Heading = From the Standard Rules|About rulebooks<RULEBOOKS>; About activities<ACTIVITIES>; Moving or abolishing rules<RLISTING>

%Index.Elements.St.TopLevelHeading = The top level
%Index.Elements.St.TopLevelRubric =
	An Inform story file spends its whole time working through these three master
	rulebooks. They can be altered, just as all rulebooks can, but it's generally
	better to leave them alone.
%Index.Elements.St.StartupRules = Startup rules
%Index.Elements.St.TurnSequenceRules = Turn sequence rules
%Index.Elements.St.ShutdownRules = Shutdown rules

%Index.Elements.St.CheckRules =
	Check rules are tied to specific actions, and there are too many to index here.
	For instance, the check taking rules can only ever affect the taking action, so
	they are indexed on the detailed index page for taking.
%Index.Elements.St.CarryOutRules =
	Carry out rules are tied to specific actions, and there are too many to index here.
%Index.Elements.St.ReportRules =
	Report rules are tied to specific actions, and there are too many to index here.

%Index.Elements.St.SequenceHeading = Rules added to the sequence of play
%Index.Elements.St.SequenceRubric =
	These rulebooks are the best places to put rules timed to happen
	at the start, at the end, or once each turn. (Each is run through at
	a carefully chosen moment in the relevant top-level rulebook.) It is
	also possible to have rules take effect at specific times of day
	or when certain events happen. Those are listed in the Scenes index,
	alongside rules taking place when scenes begin or end.
%Index.Elements.St.WhenPlayBegins = When play begins
%Index.Elements.St.EveryTurn = Every turn
%Index.Elements.St.WhenPlayEnds = When play ends

%Index.Elements.St.UnderstoodHeading = How commands are understood
%Index.Elements.St.UnderstoodRubric =
	'Understanding' here means turning a typed command, like GET FISH,
	into one or more actions, like taking the red herring. This is all handled
	by a single large rule (the parse command rule), but that rule makes use
	of the following activities and rulebooks in its work.
%Index.Elements.St.DoesThePlayerMean = Does the player mean

%Index.Elements.St.ActionsHeading = Rules governing actions
%Index.Elements.St.ActionsRubric =
	These rules are the ones which tell Inform how actions work,
	and which affect how they happen in particular cases.
%Index.Elements.St.Persuasion = Persuasion
%Index.Elements.St.UnsuccessfulAttemptBy = Unsuccessful attempt by
%Index.Elements.St.Before = Before
%Index.Elements.St.Instead = Instead
%Index.Elements.St.Check = Check
%Index.Elements.St.CarryOut = Carry out
%Index.Elements.St.After = After
%Index.Elements.St.Report = Report

%Index.Elements.St.ProcessingHeading = How actions are processed
%Index.Elements.St.ProcessingRubric =
	These form the technical machinery for dealing with actions, and are
	called on at least once every turn. They seldom need to be changed.
%Index.Elements.St.ActionProcessingRules = Action-processing rules
%Index.Elements.St.SpecificActionProcessingRules = Specific action-processing rules
%Index.Elements.St.PlayersActionAwarenessRules = Player's action awareness rules

%Index.Elements.St.ResponsesHeading = How responses are printed
%Index.Elements.St.ResponsesRubric =
	The Standard Rules, and some extensions, reply to the player's
	commands with messages which are able to be modified.

%Index.Elements.St.AccessibilityHeading = How accessibility is judged
%Index.Elements.St.AccessibilityRubric =
	These rulebooks are used when deciding who can reach what, and
	who can see what.
%Index.Elements.St.ReachingInside = Reaching inside
%Index.Elements.St.ReachingOutside = Reaching outside
%Index.Elements.St.Visibility = Visibility

%Index.Elements.St.LightHeading = Light and darkness
%Index.Elements.St.LightRubric =
	These activities control how we describe darkness.

%Index.Elements.St.DescriptionHeading = How things are described
%Index.Elements.St.DescriptionRubric =
	These activities control what is printed when naming rooms or
	things, and their descriptions.

%Index.Elements.Xt.Title = Extras
%Index.Elements.Xt.Heading = Further rulebooks, from the source or extensions|About rulebooks<RULEBOOKS>; About activities<ACTIVITIES>; Moving or abolishing rules<RLISTING>

%Index.Elements.Xt.FromSourceText = From the source text
%Index.Elements.Xt.FromExtension = From the extension *1

%Index.Pages.Scenes.Title = Scenes Index
%Index.Pages.Scenes.Caption = Like scenes in a movie

%Index.Elements.Pl.Title = Plot
%Index.Elements.Pl.Heading = A map of how the scenes begin and end|About scenes<SCENESINTRO>; How they link together<LINKINGSCENES>

%Index.Elements.Pl.LegendHeading = Legend
%Index.Elements.Pl.WPBLegend = Begins when play begins
%Index.Elements.Pl.WhenCLegend = can begin whenever some condition holds
%Index.Elements.Pl.SegueLegend = follows when a previous scene ends
%Index.Elements.Pl.SimulLegend = begins simultaneously
%Index.Elements.Pl.WNeverLegend = never begins
%Index.Elements.Pl.ENeverLegend = never ends
%Index.Elements.Pl.RecurringLegend = recurring (can happen more than once)
%Index.Elements.Pl.LegendNote =
	Scene names are italicised when and if they appear for a second
	or subsequent time because the scene can begin in more than one way.

%Index.Elements.Pl.SceneName = The <i>*1</i> scene
%Index.Elements.Pl.Recurring = recurring
%Index.Elements.Pl.EntireGame = 
	The Entire Game scene is built-in. It is going on whenever play is going
	on. (It is recurring so that if the story ends, but then resumes, it too
	will end but then begin again.)
%Index.Elements.Pl.During = During this scene:
%Index.Elements.Pl.Never = never

%Index.Elements.Pl.BeginsWhen = Begins when:
%Index.Elements.Pl.EndsWhen = Ends when:
%Index.Elements.Pl.EndsUnusuallyWhen = Ends *1 when:
%Index.Elements.Pl.OrWhen = or when:
%Index.Elements.Pl.WhatHappens = What happens

%Index.Elements.Ev.Title = Events
%Index.Elements.Ev.Heading = Timed events, if any|About timed events<TIMEDEVENTS>

%Index.Elements.Ev.None = None
%Index.Elements.Ev.Timeless = Events with no specific time
%Index.Elements.Ev.WhereTriggered = where triggered
%Index.Elements.Ev.Timetable = Timetable

%Index.Elements.RS.Title = Rules
%Index.Elements.RS.Heading = General rules about scenes

%Index.Elements.RS.Machinery = The scene-changing machinery
%Index.Elements.RS.General = General rules applying to scene changes

%Index.Elements.RS.SceneChanging = Scene changing
%Index.Elements.RS.SceneBegins = When a scene begins
%Index.Elements.RS.SceneEnds = When a scene ends

%Index.Elements.RS.Empty = There are no rules in this rulebook.
%Index.Elements.RS.Nameless = nameless
%Index.Elements.RS.Unlist = The *1 is not listed in the *2.
%Index.Elements.RS.During = during *1
%Index.Elements.RS.Response = The *1 response (*2) is "New text.".
%Index.Elements.RS.Outcome = outcome
%Index.Elements.RS.Success = a success
%Index.Elements.RS.Failure = a failure
%Index.Elements.RS.NoOutcome = no outcome
%Index.Elements.RS.DefaultSuccess = default outcome is success
%Index.Elements.RS.DefaultFailure = default outcome is failure
%Index.Elements.RS.Activity = activity
%Index.Elements.RS.BeforeActivity = Before *1
%Index.Elements.RS.ForActivity = Rule for *1
%Index.Elements.RS.AfterActivity = After *1

%Index.Pages.World.Title = World Index
%Index.Pages.World.Caption = Like locations, props and actors in a movie

%Index.Elements.Mp.Title = Map
%Index.Elements.Mp.Heading = A map of the world

%Index.Elements.Mp.Region = The <i>*1</i> region
%Index.Elements.Mp.RegionInRegion = The <i>*1</i> region within the <i>*2</i> region
%Index.Elements.Mp.NowhereHeading = Nowhere (that is, initially not in any room):
%Index.Elements.Mp.EverywhereHeading = Present everywhere:
%Index.Elements.Mp.KindOf = a kind of *1
%Index.Elements.Mp.MentionedIn = mentioned in rules
%Index.Elements.Mp.RoomWherePlayBegins = room where play begins
%Index.Elements.Mp.DoorTo = door to *1
%Index.Elements.Mp.OneSidedDoorTo = one-sided door to *1

%Index.Elements.Mp.BriefOn = on
%Index.Elements.Mp.BriefCarried = carried
%Index.Elements.Mp.BriefPart = part
%Index.Elements.Mp.BriefWorn = worn

%Index.Elements.Mp.InitialLocation = initial location
%Index.Elements.Mp.In = in *1
%Index.Elements.Mp.On = on *1
%Index.Elements.Mp.Carried = carried by *1
%Index.Elements.Mp.Part = part of *1
%Index.Elements.Mp.Worn = worn by *1

%Index.Elements.Mp.MappingAs = mapping *1 as *2

%Index.Elements.Mp.ExitTooltip = *1 to *2
%Index.Elements.Mp.ExitThroughTooltip = *1 through *2 to *3
%Index.Elements.Mp.ExitBlockedTooltip = *1 exit blocked by *2

%Index.Elements.Mp.DefaultLevel = Map
%Index.Elements.Mp.LowerLevel = Lower
%Index.Elements.Mp.UpperLevel = Upper
%Index.Elements.Mp.StartingLevel = Starting level
%Index.Elements.Mp.FirstLevelUp = First level up
%Index.Elements.Mp.FirstLevelDown = First level down
%Index.Elements.Mp.SecondLevelUp = Second level up
%Index.Elements.Mp.SecondLevelDown = Second level down
%Index.Elements.Mp.ThirdLevelUp = Third level up
%Index.Elements.Mp.ThirdLevelDown = Third level down
%Index.Elements.Mp.LevelUp = Level *1 up
%Index.Elements.Mp.LevelDown = Level *1 down

%Index.Elements.Gz.Title = Gazetteer
%Index.Elements.Index.Elements.Tb.Heading = An A-Z of places, things, people and so on

%Index.EPSMap.DefaultTitle = Map
